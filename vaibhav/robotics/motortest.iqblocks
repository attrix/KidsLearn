{"wrkspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\")~~bnzg8gAMpw@bAG?K?\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">deadBand</variable></variables><block type=\"iq_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"210\" y=\"90\"><next><block type=\"iq_motion_set_motor_torque\" id=\"`Z/@UqftuV1SdWBGGDI^\"><field name=\"MOTOR\">arm</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\"e4G/`Qa.%8DUcQkH]jKa\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\"`K2D|Voceb#m`F,9rV4S\"><field name=\"MOTOR\">arm</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"7QvM%9O=%wFs?KJve86q\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_motion_spin_to_position\" id=\")Y77:YCv`F~96VMWr!Mp\"><field name=\"MOTOR\">arm</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"K|A}*n6L#`k4Te?R_ERe\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"iq_control_forever\" id=\"}vd;4{}I9{(|hmp)x9A#\"><statement name=\"SUBSTACK\"><block type=\"iq_control_if_then\" id=\"]*F#67IMMVtGt=B1[8%6\"><value name=\"CONDITION\"><block type=\"iq_sensing_pressing_controller\" id=\"vcH#mmxR8Po)|xRsf{%v\"><field name=\"BUTTON\">ButtonLUp</field></block></value><statement name=\"SUBSTACK\"><block type=\"iq_motion_spin_for\" id=\"OeD=]2Vh5Hwo8eTq0$4p\"><field name=\"MOTOR\">arm</field><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">rev</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"-D|R(T3?;Bx)h!.~D[+*\"><field name=\"NUM\">-.25</field></shadow></value></block></statement><next><block type=\"iq_control_if_then\" id=\"li8E0LYB0XV/gGL76,Dz\"><value name=\"CONDITION\"><block type=\"iq_sensing_pressing_controller\" id=\"z/7BPG^{@x3a:(J#?dGw\"><field name=\"BUTTON\">ButtonLDown</field></block></value><statement name=\"SUBSTACK\"><block type=\"iq_motion_spin_for\" id=\"oyW@(3Fw4^eqfp1hLh56\"><field name=\"MOTOR\">arm</field><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">rev</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"h)$rp9+jidm@b-!LLZmt\"><field name=\"NUM\">-..25</field></shadow></value></block></statement></block></next></block></statement></block></next></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[4],"name":"arm","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}},{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","setting":{"left":"arm","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","drive":"split"}},{"port":[1,7,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","setting":{"wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","hasGyro":"false","width":"173","unit":"mm"}}],"slot":0,"cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"iq_cpp.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n// Robot configuration code.\nmotor arm = motor(vex::PORT4, false);\ncontroller Controller = controller();\nvex::motor LeftDriveSmart = vex::motor(vex::PORT1, 1, false);\nvex::motor RightDriveSmart = vex::motor(vex::PORT7, 1, true);\nvex::drivetrain Drivetrain= vex::drivetrain(LeftDriveSmart, RightDriveSmart,200, 173);\n;\n\n//Vision sensor index vars.\nint Vision1_objectIndex = 0;\n\nint Brain_precision;\n\n\n// Generated code.\n\nbool RemoteControlCodeEnabled = true;\n\n\n\n bool LeftStop_Backend_Bool_Controller = true;\n \n \n \n \n \nbool drivetrainL_Backend_Bool_Controller = true; \n bool drivetrainR_Backend_Bool_Controller = true;\n  int rc_auto_loop_callback_Controller() {\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n    int l_speed_for_d_train = Controller.AxisA.position() + Controller.AxisC.position();\n    int r_speed_for_d_train = Controller.AxisA.position() - Controller.AxisC.position();\nif (l_speed_for_d_train < 5 && l_speed_for_d_train > -5){\nif (drivetrainL_Backend_Bool_Controller) { LeftDriveSmart.stop(); drivetrainL_Backend_Bool_Controller = false;\n}\n} else {drivetrainL_Backend_Bool_Controller = true;} if (r_speed_for_d_train < 5 && r_speed_for_d_train > -5){\nif (drivetrainR_Backend_Bool_Controller) { RightDriveSmart.stop(); drivetrainR_Backend_Bool_Controller = false;\n}\n} else {drivetrainR_Backend_Bool_Controller = true;}     if (drivetrainL_Backend_Bool_Controller){\nLeftDriveSmart.setVelocity(l_speed_for_d_train, vex::velocityUnits::pct);\n    LeftDriveSmart.spin(vex::directionType::fwd);\n}    if (drivetrainR_Backend_Bool_Controller){\nRightDriveSmart.setVelocity(r_speed_for_d_train, vex::velocityUnits::pct);\n    RightDriveSmart.spin(vex::directionType::fwd);\n}\n    if (Controller.ButtonLUp.pressing()) {\n      arm.spin(vex::directionType::fwd);\n      LeftStop_Backend_Bool_Controller = false;\n   }\n    else if (Controller.ButtonLDown.pressing()) {\n      arm.spin(vex::directionType::rev);\n      LeftStop_Backend_Bool_Controller = false;\n  }\n    else if (!LeftStop_Backend_Bool_Controller){\n      arm.stop();\n      LeftStop_Backend_Bool_Controller = true;\n   }\n                    }\ntask::sleep(20);\n  }\n return 0;\n}\n\n\n\nfloat deadBand;\n\nint whenStarted1() {\n  arm.setMaxTorque(100.0, vex::percentUnits::pct);\n  arm.setVelocity(100.0, vex::velocityUnits::pct);\n  arm.rotateTo(0.0, vex::rotationUnits::deg, true);\n  while (true) {\n    if (Controller.ButtonLUp.pressing()) {\n      arm.rotateFor(-0.25 * -1, vex::rotationUnits::rev, true);\n    }\n    if (Controller.ButtonLDown.pressing()) {\n      arm.rotateFor(0.0 * -1, vex::rotationUnits::rev, true);\n    }\n  task::sleep(20);\n  }\nreturn 0;\n}\n\n\nint main() {\n\n\n  srand(vex::timer::system());\n\n  vex::task rc_auto_loop_task_Controller(rc_auto_loop_callback_Controller);\n\n\n  // pre event registration\n  // register event handlers\n\n  task::sleep(15);\n  // post event registration\n\n  // when started blocks...\n\n  whenStarted1();\n  return 0;\n}","cppStatus":"true","platform":"IQ","sdkVersion":"0.4.3","appVersion":"1.0.4-8","fileFormat":"0.1.0","icon":""}